/*Today is 1th of May,2022.
 *The website of daily promble is https://leetcode.cn/problems/all-elements-in-two-binary-search-trees/.
 *Have a good day!🌷🌷🌷
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inOrder(TreeNode* root,vector<int>& nums)
    {
        //中序遍历
        if(root!=nullptr)
        {
            inOrder(root->left,nums);
            nums.emplace_back(root->val);
            inOrder(root->right,nums);
        }
    }
    vector<int> merge(vector<int>& nums1,vector<int>& nums2)
    {
        vector<int>nums;
        int i=0,j=0;
        while(i<nums1.size() && j<nums2.size())
        {
            if(nums1[i]<nums2[j])
            {
                nums.emplace_back(nums1[i]);
                i++;
            }
            else
            {
                nums.emplace_back(nums2[j]);
                j++;
            }
        }
        if(i==nums1.size())
        {
            while(j<nums2.size())
            {
                nums.emplace_back(nums2[j]);
                j++;
            }
        }
        else
        {
            while(i<nums1.size())
            {
                nums.emplace_back(nums1[i]);
                i++;
            }
        }
        return nums;
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        //中序遍历得到两个升序数组
        //将两个升序数组进行合并
        vector<int>nums1,nums2;
        inOrder(root1,nums1);
        inOrder(root2,nums2);
        return merge(nums1,nums2);
    }
};
